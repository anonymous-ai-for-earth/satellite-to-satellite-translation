'''
Code to search and read AHI12 surface reflectance data generated by MAIAC
'''

import os, sys
import numpy as np
from pyhdf.SD import SD, SDC
from scipy import ndimage
import glob
import pandas as pd
import xarray as xr
from . import geonexl1g
from scipy import ndimage

np.random.seed(0)

class AHI12(object):
    '''
        Reads a single AHI12 surface reflectance file at a common resolution. 
        Channels are bilinearly interpolated to the defined resolution.
    Args:
        file: Filepath to AHI12
        resolution_km (optional): Resolution in km for common grid, default=1
    '''
    def __init__(self, file, resolution_km=1.):
        super(AHI12, self).__init__()
        self.file = file
        self.resolution_km = resolution_km
        self.resolution_size = int(600. / resolution_km)
        
    def load(self):
        fp = SD(self.file, SDC.READ)
        surf_refl_obj = fp.select('sur_refl') # shape: (6, 600, 600)
        surf_refl = surf_refl_obj.get()[:].astype(np.float32)
        attrs = surf_refl_obj.attributes()
        offset = attrs['add_offset']
        scalefactor = attrs['scale_factor']
        fillval = attrs['_FillValue']
        surf_refl[surf_refl == fillval] = np.nan
        surf_refl *= scalefactor
        surf_refl += offset
        arr = np.zeros((surf_refl.shape[0], self.resolution_size, self.resolution_size))
        if surf_refl.shape[1] != self.resolution_size:
            for i in range(surf_refl.shape[0]):
                arr[i] = ndimage.interpolation.zoom(surf_refl[i], self.resolution_size/surf_refl.shape[1], order=1)
            surf_refl = arr
        return np.transpose(surf_refl, (1,2,0))
    

class MAIACFiles(object):
    '''
    Search MAIAC files
    Expected directory structure: 
             Output/(tile)/(year)/(dayofyear)/HM08_AHI12B_(year)(dayofyear)(hour)(minute)_GLBG_(tile)_*.hdf
    Args:
        data_path: Directory of AHI12 files
    '''
    def __init__(self, data_path):
        self.data_path = data_path
        
    def tiles(self):
        tile_pattern = os.path.join(self.data_path, 'h*v*')
        tile_folders = glob.glob(tile_pattern)
        tiles = [os.path.basename(t) for t in tile_folders]
        return tiles
    
    def yeardays(self, tile):
        years = [int(f) for f in os.listdir(os.path.join(self.data_path, tile)) if f.isnumeric()]
        pairs = []
        for y in years:
            ypath = os.path.join(self.data_path, tile, str(y))
            pairs += [(y, int(d)) for d in os.listdir(ypath) if d.isnumeric()]
        return pairs
        
            
    def files(self, tile=None, year=None, dayofyear=None, cachedir='.tmp'):
        '''
        Retrieve a dataframe of files for given parameters
        
        Args:
            tile (optional): Tile from GeoNEX grid
            year (optional): Year of files to get
            dayofyear (optional): Day of year
            cachedir (optional): Cache filelist in directory
        Returns:
            pd.DataFrame of filelist with year, dayofyear, hour, minute, tile, file, h, and v
        '''

        if tile == None:
            tile = '*'
        if year == None:
            year = '*'
        else:
            year = str(year)
        if dayofyear == None:
            dayofyear = '*'
        else:
            dayofyear = '%03i' % dayofyear
        cache_file = f'{cachedir}/.tmp/filelist/maiac_{tile}_{year}_{dayofyear}.pkl'
        if os.path.exists(cache_file):
            return pd.read_pickle(cache_file)
    
        file_pattern = os.path.join(self.data_path, '%s/%s/%s/HM08_AHI12B*.hdf' % (tile, year, dayofyear))
        files = glob.glob(file_pattern)
        fileinfo = []
        for f in files:
            filename = os.path.basename(f)
            
            fs = filename.split('_')
            y = int(fs[2][:4])
            doy = int(fs[2][4:7])
            hour = int(fs[2][7:9])
            minute =  int(fs[2][9:11])
            tile = fs[4]
            
            fileinfo.append(dict(year=y, dayofyear=doy, hour=hour,
                              minute=minute, file=f, tile=tile))    
    
        fileinfo = pd.DataFrame(fileinfo)
        if not os.path.exists(os.path.dirname(cache_file)):
            os.makedirs(os.path.dirname(cache_file))
        fileinfo.to_pickle(cache_file)
        return fileinfo   
    
    
class MAIACPairs(object):
    '''
    Retrieves pairs of files where Level 1 TOA and Level 2 surface reflectance match
    Args:
        ahi05_path: Path to L1G data product, uses geonexl1b.GeoNEXl1b
        ahi12_path: Path to AHI12 data product, uses MAIACFiles
    '''
    def __init__(self, ahi05_path, ahi12_path):
        self.ahi05_path = ahi05_path
        self.ahi12_path = ahi12_path
        self.ahi05 = geonexl1g.GeoNEXL1G(ahi05_path, 'AHI')
        self.ahi12 = MAIACFiles(ahi12_path)
        
    def paired_files(self, tile=None, year=None, dayofyear=None):
        ahi05_files = self.ahi05.files(tile=tile, year=year, dayofyear=dayofyear).set_index(['tile', 'year', 'dayofyear', 'hour', 'minute'])
        ahi12_files = self.ahi12.files(tile=tile, year=year, dayofyear=dayofyear).set_index(['tile', 'year', 'dayofyear', 'hour', 'minute'])
        joined = ahi05_files.join(ahi12_files, rsuffix='ahi12', lsuffix='ahi05', how='inner')
        return joined